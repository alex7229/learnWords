{"version":3,"sources":["node_modules/browser-pack/_prelude.js","main.compiled.js","public/learnWords/main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Controller","this","value","word","document","getElementById","AjaxRequests","getWordFromServer","then","data","View","yandex","YandexParse","getData","err","status","yandexApi","googleApi","google","GoogleParse","onclick","getMeaning","getTranslation","learningMachine","checkAnswer","bind","sendQuestion","Promise","resolve","fetch","method","headers","Content-Type","body","JSON","stringify","response","text","reject","rawData","parse","def","map","description","type","pos","transcription","ts","translations","tr","translation","examples","transformExamples","ex","synonyms","transformSynonyms","syn","synonymsEn","mean","translationType","arguments","undefined","example","synonym","parsedWords","toLowerCase","reduce","previousWords","currentWord","concat","definitionLists","findDefinitionLists","findDefinitionChunks","webDefinitionLists","findWebDefinitionLists","findWebDefinitionChunk","grammar","findGrammar","regExp","regExpResult","definitionsChunks","exec","push","typeOfWord","chunks","chunk","list","split","slice","listValue","deleteUnnecessaryRow","match","replace","webList","words","innerHTML","index","join","definitions","definition","webDefinition","row","textContent","LearnMachine","correctAnswers","allWords","_this","getWordList","userAnswer","includes","console","log","wordNumber","Math","ceil","random","getAnswer","showQuestion","_this2","findCorrectAnswers","getAllWords","window","onload","setTimeout","listenButtons"],"mappings":"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","file":"main.compiled.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//parsing from txt.rawData into JSON\n/*$.ajax({\r\n    url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/bast/Lemmatized/2+2+3frq.txt`\r\n})\r\n    .then(data => {\r\n        //console.log(data);\r\n        let rawData = data.toLowerCase().replace(/[!)(]/g, '');\r\n        let regExpGroups = /----- \\d{1,2} -----/g;\r\n        let wordGroups = rawData.split(regExpGroups);\r\n        let bigList = [];\r\n        let wordNumber = 0;\r\n        for (let i=1; i<=21; i++) {\r\n            let group = wordGroups[i];\r\n            let regExpWords = /([\\w'-]+)\\r\\n(?:\\s{4}([ \\w,*'-]+)\\r\\n)?/g;\r\n            let regExpResult;\r\n            while ((regExpResult = regExpWords.exec(group)) !== null) {\r\n                wordNumber++;\r\n                let word = {\r\n                    word: regExpResult[1],\r\n                    number: wordNumber,\r\n                    group: i,\r\n                    differentSpellings: regExpResult[2]\r\n                };\r\n                if (!word.word.match(/-/)) {\r\n                    bigList.push(word);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        //duplicates\r\n        bigList.splice(19127, 1);\r\n        bigList.splice(2821, 1);\r\n        bigList.splice(10143, 1);\r\n        bigList.splice(10153, 1);\r\n        console.log(((JSON.stringify(bigList))));\r\n        bigList.map((currentWord, index) => {\r\n            let sameWords = bigList.filter(possibleWord => {\r\n                if (currentWord.word === possibleWord.word) {\r\n                    return possibleWord\r\n                }\r\n            });\r\n            if (sameWords.length > 1) {\r\n                console.log(`word ${currentWord.word} has duplicates, index is ${index}`)\r\n            }\r\n        })\r\n    });\r\n*/\n\n//get sorted Data\n/*$.ajax({\r\n    url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt'\r\n})\r\n.done((data) => {\r\n    let mainWords = JSON.parse(data);\r\n    $.ajax({\r\n            url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/300k.txt'\r\n        })\r\n        .done((data) => {\r\n            let superBigList = [];\r\n\r\n            let powerWordsRaw = data;\r\n            let regExp = /(\\w+)\\s+(\\d+)/g;\r\n            let regExpResult;\r\n            while ((regExpResult = (regExp.exec(powerWordsRaw)))!==null) {\r\n                superBigList.push({\r\n                    word: regExpResult[1],\r\n                    power: parseInt(regExpResult[2])\r\n                })\r\n            }\r\n\r\n\r\n            let power = 3000;\r\n            for (let i=0; i<mainWords.length; i++) {\r\n                let mainWord = mainWords[i];\r\n                for (let j=0; j<superBigList.length; j++) {\r\n                    let powerWord = superBigList[j];\r\n                    if (mainWord.word === powerWord.word) {\r\n                        mainWord.power = powerWord.power;\r\n                        break\r\n                    }\r\n                }\r\n                if (!mainWord.power) {\r\n                    mainWord.power = power;\r\n                    power--\r\n                }\r\n            }\r\n\r\n\r\n            function compare (a,b) {\r\n                if (a.power>b.power) return -1;\r\n                if (a.power<b.power) return 1;\r\n                return 0\r\n            }\r\n            mainWords.sort(compare);\r\n            console.log((JSON.stringify(mainWords)));\r\n\r\n\r\n\r\n        });\r\n\r\n});*/\n\n//todo -  add sound (when u guessed right answer) from fallout4, add authentication (to save user progress)\n\n\nvar Controller = function () {\n    function Controller() {\n        _classCallCheck(this, Controller);\n    }\n\n    _createClass(Controller, null, [{\n        key: 'getTranslation',\n        value: function getTranslation() {\n            var word = document.getElementById('word').value;\n            if (!word) return;\n            AjaxRequests.getWordFromServer(word).then(function (data) {\n                View.yandex(YandexParse.getData(data));\n            }, function (err) {\n                if (err.status === 404) {\n                    AjaxRequests.yandexApi(word).then(function (data) {\n                        View.yandex(YandexParse.getData(data));\n                    });\n                }\n            });\n        }\n    }, {\n        key: 'getMeaning',\n        value: function getMeaning() {\n            var word = document.getElementById('word').value;\n            if (!word) return;\n            AjaxRequests.googleApi(word).then(function (data) {\n                View.google(GoogleParse.getData(data));\n            });\n        }\n    }, {\n        key: 'listenButtons',\n        value: function listenButtons() {\n            document.getElementById(\"getMeaning\").onclick = Controller.getMeaning;\n            document.getElementById(\"getTranslation\").onclick = Controller.getTranslation;\n            document.getElementById(\"checkAnswer\").onclick = learningMachine.checkAnswer.bind(learningMachine);\n            document.getElementById(\"sendQuestion\").onclick = learningMachine.sendQuestion.bind(learningMachine);\n        }\n    }]);\n\n    return Controller;\n}();\n\nvar AjaxRequests = function () {\n    function AjaxRequests() {\n        _classCallCheck(this, AjaxRequests);\n    }\n\n    _createClass(AjaxRequests, null, [{\n        key: 'yandexApi',\n        value: function yandexApi(word) {\n            return new Promise(function (resolve) {\n                fetch('/getTranslation', {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        word: word\n                    })\n                }).then(function (response) {\n                    resolve(response.text());\n                });\n            });\n        }\n    }, {\n        key: 'googleApi',\n        value: function googleApi(word) {\n            return new Promise(function (resolve) {\n                fetch('/getMeaning', {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        word: word\n                    })\n                }).then(function (response) {\n                    resolve(response.text());\n                });\n            });\n        }\n    }, {\n        key: 'getWordFromServer',\n        value: function getWordFromServer(word) {\n            return new Promise(function (resolve) {\n                fetch('http://tup1tsa.bounceme.net/learnWords/wordsLists/yandexTranslations/' + word + '.txt').then(function (response) {\n                    resolve(response.text());\n                }, function (err) {\n                    reject(err);\n                });\n            });\n        }\n    }, {\n        key: 'getWordList',\n        value: function getWordList() {\n            return new Promise(function (resolve) {\n                fetch('http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt').then(function (response) {\n                    resolve(response.text());\n                }, function (err) {\n                    reject(err);\n                });\n            });\n        }\n    }]);\n\n    return AjaxRequests;\n}();\n\nvar YandexParse = function () {\n    function YandexParse() {\n        _classCallCheck(this, YandexParse);\n    }\n\n    _createClass(YandexParse, null, [{\n        key: 'getData',\n        value: function getData(rawData) {\n            var data = JSON.parse(rawData);\n            if (data.def.length === 0) return;\n            return data.def.map(function (description) {\n                return {\n                    type: description.pos || '',\n                    transcription: description.ts ? '[' + description.ts + ']' : '',\n                    translations: description.tr.map(function (translation) {\n                        return {\n                            examples: YandexParse.transformExamples(translation.ex),\n                            synonyms: YandexParse.transformSynonyms(translation.syn),\n                            synonymsEn: YandexParse.transformSynonyms(translation.mean),\n                            translationType: translation.pos,\n                            translation: translation.text\n                        };\n                    })\n\n                };\n            });\n        }\n    }, {\n        key: 'transformExamples',\n        value: function transformExamples() {\n            var examples = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n            return examples.map(function (example) {\n                return example.text + ' - ' + example.tr[0].text;\n            });\n        }\n    }, {\n        key: 'transformSynonyms',\n        value: function transformSynonyms() {\n            var synonyms = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n            return synonyms.map(function (synonym) {\n                return synonym.text;\n            });\n        }\n    }, {\n        key: 'findCorrectAnswers',\n        value: function findCorrectAnswers(parsedWords) {\n            return parsedWords.map(function (word) {\n                return word.translations.map(function (translation) {\n                    return translation.translation.toLowerCase();\n                });\n            }).reduce(function (previousWords, currentWord) {\n                return previousWords.concat(currentWord);\n            }, []);\n        }\n    }]);\n\n    return YandexParse;\n}();\n\nvar GoogleParse = function () {\n    function GoogleParse() {\n        _classCallCheck(this, GoogleParse);\n    }\n\n    _createClass(GoogleParse, null, [{\n        key: 'getData',\n        value: function getData(rawData) {\n            return {\n                definitionLists: GoogleParse.findDefinitionLists(GoogleParse.findDefinitionChunks(rawData)),\n                webDefinitionLists: GoogleParse.findWebDefinitionLists(GoogleParse.findWebDefinitionChunk(rawData)),\n                grammar: GoogleParse.findGrammar(rawData)\n            };\n        }\n    }, {\n        key: 'findDefinitionChunks',\n        value: function findDefinitionChunks(rawData) {\n            var regExp = /<b>(.*)\\n[\\s\\S]*?<\\/[\\s\\S]*?<div class=std style=\"padding-left:40px\">([\\s\\S]*?)(<div id=\"forEmbed\">|<hr>)/g;\n            var regExpResult = void 0;\n            var definitionsChunks = [];\n            while ((regExpResult = regExp.exec(rawData)) !== null) {\n                definitionsChunks.push({\n                    typeOfWord: regExpResult[1],\n                    body: regExpResult[2]\n                });\n            }\n            return definitionsChunks;\n        }\n    }, {\n        key: 'findDefinitionLists',\n        value: function findDefinitionLists(chunks) {\n            return chunks.map(function (chunk) {\n                var list = chunk.body.split(/<li style=\"list-style:decimal\">/g).slice(1).map(function (listValue) {\n                    return GoogleParse.deleteUnnecessaryRow(listValue);\n                });\n                return {\n                    typeOfWord: chunk.typeOfWord,\n                    list: list\n                };\n            });\n        }\n    }, {\n        key: 'deleteUnnecessaryRow',\n        value: function deleteUnnecessaryRow(listValue) {\n            var regExp = /color:#767676/;\n            if (listValue.match(regExp)) {\n                return listValue;\n            } else {\n                return listValue.replace(/<div[\\s\\S]*<\\/div>/, '');\n            }\n        }\n    }, {\n        key: 'findWebDefinitionChunk',\n        value: function findWebDefinitionChunk(rawData) {\n            var regExp = /Web Definitions[\\s\\S]*<\\/ol>/g;\n            return rawData.match(regExp)[0];\n        }\n    }, {\n        key: 'findWebDefinitionLists',\n        value: function findWebDefinitionLists(chunk) {\n            var webList = [];\n            var regExp = /<li style=\"list-style:decimal; margin-bottom:10px;\">([\\s\\S]*?)<\\/li>/g;\n            var regExpResult = void 0;\n            while ((regExpResult = regExp.exec(chunk)) !== null) {\n                webList.push(regExpResult[1]);\n            }\n            return webList;\n        }\n    }, {\n        key: 'findGrammar',\n        value: function findGrammar(rawData) {\n            var regExp = /<span style=\"color:#767676\">([\\s\\S]*?)<\\/span>/;\n            return rawData.match(regExp)[1].slice(0, -2);\n        }\n    }]);\n\n    return GoogleParse;\n}();\n\nvar View = function () {\n    function View() {\n        _classCallCheck(this, View);\n    }\n\n    _createClass(View, null, [{\n        key: 'yandex',\n        value: function yandex(words) {\n            document.getElementById('translationBox').innerHTML = words.map(function (word) {\n                return '<br><span class=\"ital\"><b>' + word.type + '</b></span> ' + word.transcription + ' ' + word.translations.map(function (translation, index) {\n                    var innerHTML = '<br>' + (index + 1) + ') ' + translation.translation;\n                    if (translation.examples.length !== 0) {\n                        innerHTML += '. <br><span class=\"tabbed\">Examples:</span> ' + translation.examples.join('; ');\n                    }\n                    if (translation.synonyms.length !== 0) {\n                        innerHTML += '. <br><span class=\"tabbed\">Synonyms:</span> ' + translation.synonyms.join('; ');\n                    }\n                    if (translation.synonymsEn.length !== 0) {\n                        innerHTML += '. <br><span class=\"tabbed\">Synonyms (en):</span> ' + translation.synonymsEn.join('; ');\n                    }\n                    return innerHTML;\n                }).join('');\n            }) + '<hr>';\n        }\n    }, {\n        key: 'google',\n        value: function google(data) {\n            var grammar = '<span class=\"googleGrammar\"><b>Grammar:</b> ' + data.grammar + '</span><br>';\n            var definitions = data.definitionLists.map(function (chunk) {\n                return '<b>' + chunk.typeOfWord + '</b><br><ol>\\n                ' + chunk.list.map(function (definition) {\n                    return '<li>' + definition + '</li>';\n                }).join('') + '</ol><hr>';\n            });\n            var webDefinition = '<b>Web Results:</b><ol>\\n            ' + data.webDefinitionLists.map(function (row) {\n                return '<li>' + row + '</li>';\n            }).join('') + '</ol>';\n            document.getElementById('dictionaryBox').innerHTML = grammar + definitions + webDefinition;\n        }\n    }, {\n        key: 'showQuestion',\n        value: function showQuestion(word) {\n            document.getElementById('questionedWord').textContent = word;\n        }\n    }]);\n\n    return View;\n}();\n\nvar LearnMachine = function () {\n    function LearnMachine() {\n        _classCallCheck(this, LearnMachine);\n\n        this.correctAnswers = [];\n        this.allWords = [];\n    }\n\n    _createClass(LearnMachine, [{\n        key: 'getAllWords',\n        value: function getAllWords() {\n            var _this = this;\n\n            AjaxRequests.getWordList().then(function (data) {\n                _this.allWords = JSON.parse(data);\n            }, function (err) {\n                throw err;\n            });\n        }\n    }, {\n        key: 'checkAnswer',\n        value: function checkAnswer() {\n            var userAnswer = document.getElementById('answerWord').value;\n            if (this.correctAnswers.includes(userAnswer)) {\n                console.log('answer is correct');\n            } else {\n                console.log('answer is incorrect');\n            }\n        }\n    }, {\n        key: 'sendQuestion',\n        value: function sendQuestion() {\n            var wordNumber = Math.ceil(Math.random() * 1000);\n            var word = this.allWords[wordNumber].word;\n            this.getAnswer(word);\n            View.showQuestion(word);\n        }\n    }, {\n        key: 'getAnswer',\n        value: function getAnswer(word) {\n            var _this2 = this;\n\n            AjaxRequests.getWordFromServer(word).then(function (data) {\n                _this2.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data));\n            }, function (err) {\n                if (err.status === 404) {\n                    AjaxRequests.yandexApi(word).then(function (data) {\n                        _this2.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data));\n                    });\n                }\n            });\n        }\n    }]);\n\n    return LearnMachine;\n}();\n\nvar learningMachine = new LearnMachine();\nlearningMachine.getAllWords();\n\nwindow.onload = function () {\n    setTimeout(function () {\n        learningMachine.sendQuestion();\n        Controller.listenButtons();\n    }, 2500);\n};\n\n},{}]},{},[1])\n\n","\r\n //parsing from txt.rawData into JSON\r\n/*$.ajax({\r\n    url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/bast/Lemmatized/2+2+3frq.txt`\r\n})\r\n    .then(data => {\r\n        //console.log(data);\r\n        let rawData = data.toLowerCase().replace(/[!)(]/g, '');\r\n        let regExpGroups = /----- \\d{1,2} -----/g;\r\n        let wordGroups = rawData.split(regExpGroups);\r\n        let bigList = [];\r\n        let wordNumber = 0;\r\n        for (let i=1; i<=21; i++) {\r\n            let group = wordGroups[i];\r\n            let regExpWords = /([\\w'-]+)\\r\\n(?:\\s{4}([ \\w,*'-]+)\\r\\n)?/g;\r\n            let regExpResult;\r\n            while ((regExpResult = regExpWords.exec(group)) !== null) {\r\n                wordNumber++;\r\n                let word = {\r\n                    word: regExpResult[1],\r\n                    number: wordNumber,\r\n                    group: i,\r\n                    differentSpellings: regExpResult[2]\r\n                };\r\n                if (!word.word.match(/-/)) {\r\n                    bigList.push(word);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        //duplicates\r\n        bigList.splice(19127, 1);\r\n        bigList.splice(2821, 1);\r\n        bigList.splice(10143, 1);\r\n        bigList.splice(10153, 1);\r\n        console.log(((JSON.stringify(bigList))));\r\n        bigList.map((currentWord, index) => {\r\n            let sameWords = bigList.filter(possibleWord => {\r\n                if (currentWord.word === possibleWord.word) {\r\n                    return possibleWord\r\n                }\r\n            });\r\n            if (sameWords.length > 1) {\r\n                console.log(`word ${currentWord.word} has duplicates, index is ${index}`)\r\n            }\r\n        })\r\n    });\r\n*/\r\n\r\n\r\n//get sorted Data\r\n/*$.ajax({\r\n    url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt'\r\n})\r\n.done((data) => {\r\n    let mainWords = JSON.parse(data);\r\n    $.ajax({\r\n            url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/300k.txt'\r\n        })\r\n        .done((data) => {\r\n            let superBigList = [];\r\n\r\n            let powerWordsRaw = data;\r\n            let regExp = /(\\w+)\\s+(\\d+)/g;\r\n            let regExpResult;\r\n            while ((regExpResult = (regExp.exec(powerWordsRaw)))!==null) {\r\n                superBigList.push({\r\n                    word: regExpResult[1],\r\n                    power: parseInt(regExpResult[2])\r\n                })\r\n            }\r\n\r\n\r\n            let power = 3000;\r\n            for (let i=0; i<mainWords.length; i++) {\r\n                let mainWord = mainWords[i];\r\n                for (let j=0; j<superBigList.length; j++) {\r\n                    let powerWord = superBigList[j];\r\n                    if (mainWord.word === powerWord.word) {\r\n                        mainWord.power = powerWord.power;\r\n                        break\r\n                    }\r\n                }\r\n                if (!mainWord.power) {\r\n                    mainWord.power = power;\r\n                    power--\r\n                }\r\n            }\r\n\r\n\r\n            function compare (a,b) {\r\n                if (a.power>b.power) return -1;\r\n                if (a.power<b.power) return 1;\r\n                return 0\r\n            }\r\n            mainWords.sort(compare);\r\n            console.log((JSON.stringify(mainWords)));\r\n\r\n\r\n\r\n        });\r\n\r\n});*/\r\n\r\n\r\n\r\n//todo -  add sound (when u guessed right answer) from fallout4, add authentication (to save user progress)\r\n\r\n\r\n class Controller {\r\n\r\n    static getTranslation() {\r\n        const word = document.getElementById('word').value;\r\n        if ((!word)) return;\r\n        AjaxRequests.getWordFromServer(word)\r\n            .then(data => {\r\n                View.yandex(YandexParse.getData(data))\r\n            }, err => {\r\n                if (err.status === 404) {\r\n                    AjaxRequests.yandexApi(word)\r\n                        .then(data => {\r\n                            View.yandex(YandexParse.getData(data))\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    static getMeaning() {\r\n        const word = document.getElementById('word').value;\r\n        if ((!word)) return;\r\n        AjaxRequests.googleApi(word)\r\n            .then(data => {\r\n                View.google(GoogleParse.getData(data))\r\n            })\r\n    }\r\n\r\n    static listenButtons () {\r\n        document.getElementById(\"getMeaning\").onclick = Controller.getMeaning;\r\n        document.getElementById(\"getTranslation\").onclick  = Controller.getTranslation;\r\n        document.getElementById(\"checkAnswer\").onclick = learningMachine.checkAnswer.bind(learningMachine);\r\n        document.getElementById(\"sendQuestion\").onclick = learningMachine.sendQuestion.bind(learningMachine)\r\n    }\r\n\r\n}\r\n\r\n\r\n class AjaxRequests {\r\n\r\n     static yandexApi(word) {\r\n        return new Promise(resolve => {\r\n           fetch('/getTranslation', {\r\n               method: 'post',\r\n               headers: {\r\n                   'Content-Type': 'application/json'\r\n               },\r\n               body: JSON.stringify({\r\n                   word\r\n               })\r\n           })\r\n               .then(response => {\r\n                   resolve (response.text())\r\n               })\r\n\r\n        });\r\n     }\r\n\r\n     static googleApi (word) {\r\n         return new Promise (resolve => {\r\n            fetch('/getMeaning', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    word\r\n                })\r\n            })\r\n                .then(response => {\r\n                    resolve(response.text())\r\n                })\r\n         });\r\n     }\r\n\r\n     static getWordFromServer (word) {\r\n         return new Promise (resolve => {\r\n             fetch(`http://tup1tsa.bounceme.net/learnWords/wordsLists/yandexTranslations/${word}.txt`)\r\n                 .then(response => {\r\n                     resolve(response.text())\r\n                 }, err => {\r\n                     reject(err)\r\n                 })\r\n         })\r\n     }\r\n\r\n     static getWordList () {\r\n         return new Promise (resolve => {\r\n             fetch(`http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt`)\r\n                 .then(response => {\r\n                     resolve(response.text())\r\n                 }, err => {\r\n                     reject(err)\r\n                 })\r\n         })\r\n     }\r\n\r\n }\r\n\r\n class YandexParse {\r\n\r\n    static getData (rawData) {\r\n        const data = JSON.parse(rawData);\r\n        if (data.def.length === 0) return;\r\n        return data.def.map(description => {\r\n            return {\r\n                type: description.pos || ``,\r\n                transcription: description.ts ? `[${description.ts}]` : ``,\r\n                translations: description.tr\r\n                    .map(translation => {\r\n                        return {\r\n                            examples: YandexParse.transformExamples(translation.ex),\r\n                            synonyms: YandexParse.transformSynonyms(translation.syn),\r\n                            synonymsEn: YandexParse.transformSynonyms(translation.mean),\r\n                            translationType: translation.pos,\r\n                            translation: translation.text\r\n                        };\r\n                    })\r\n\r\n            };\r\n        })\r\n    }\r\n\r\n    static transformExamples (examples = []) {\r\n        return examples.map(example => {\r\n            return `${example.text} - ${example.tr[0].text}`\r\n        })\r\n    }\r\n\r\n    static transformSynonyms (synonyms = []) {\r\n        return synonyms.map(synonym => {\r\n            return synonym.text\r\n        })\r\n    }\r\n\r\n    static findCorrectAnswers (parsedWords) {\r\n        return parsedWords.map(word => {\r\n            return word.translations.map(translation => {\r\n                return translation.translation.toLowerCase()\r\n            })\r\n        }).reduce((previousWords, currentWord) => {\r\n            return previousWords.concat(currentWord)\r\n        }, [])\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n class GoogleParse {\r\n\r\n     static getData (rawData) {\r\n         return {\r\n             definitionLists : GoogleParse.findDefinitionLists(GoogleParse.findDefinitionChunks(rawData)),\r\n             webDefinitionLists: GoogleParse.findWebDefinitionLists(GoogleParse.findWebDefinitionChunk(rawData)),\r\n             grammar: GoogleParse.findGrammar(rawData)\r\n         }\r\n     }\r\n\r\n     static findDefinitionChunks(rawData) {\r\n         const regExp = /<b>(.*)\\n[\\s\\S]*?<\\/[\\s\\S]*?<div class=std style=\"padding-left:40px\">([\\s\\S]*?)(<div id=\"forEmbed\">|<hr>)/g;\r\n         let regExpResult;\r\n         let definitionsChunks = [];\r\n         while ((regExpResult = regExp.exec(rawData)) !== null) {\r\n             definitionsChunks.push({\r\n                 typeOfWord: regExpResult[1],\r\n                 body: regExpResult[2]\r\n             })\r\n         }\r\n         return definitionsChunks\r\n     }\r\n\r\n     static findDefinitionLists(chunks) {\r\n         return chunks.map(chunk => {\r\n             const list = chunk.body.split(/<li style=\"list-style:decimal\">/g).slice(1).map(listValue => {\r\n                return GoogleParse.deleteUnnecessaryRow(listValue)\r\n             });\r\n             return {\r\n                 typeOfWord: chunk.typeOfWord,\r\n                 list\r\n             }\r\n         })\r\n     }\r\n\r\n     static deleteUnnecessaryRow(listValue) {\r\n         const regExp = /color:#767676/;\r\n         if (listValue.match(regExp)) {\r\n             return listValue\r\n         } else {\r\n             return listValue.replace(/<div[\\s\\S]*<\\/div>/, '')\r\n         }\r\n     }\r\n\r\n\r\n     static findWebDefinitionChunk(rawData) {\r\n         const regExp = /Web Definitions[\\s\\S]*<\\/ol>/g;\r\n         return rawData.match(regExp)[0];\r\n     }\r\n\r\n     static findWebDefinitionLists (chunk) {\r\n         let webList = [];\r\n         const regExp = /<li style=\"list-style:decimal; margin-bottom:10px;\">([\\s\\S]*?)<\\/li>/g;\r\n         let regExpResult;\r\n         while ((regExpResult = regExp.exec(chunk)) !== null) {\r\n             webList.push(regExpResult[1])\r\n         }\r\n         return webList\r\n     }\r\n\r\n     static findGrammar (rawData) {\r\n         const regExp = /<span style=\"color:#767676\">([\\s\\S]*?)<\\/span>/;\r\n         return rawData.match(regExp)[1].slice(0,-2);\r\n     }\r\n }\r\n\r\n\r\n class View {\r\n\r\n     static yandex (words) {\r\n         document.getElementById('translationBox').innerHTML =\r\n             words.map(word => {\r\n                 return `<br><span class=\"ital\"><b>${word.type}</b></span> ${word.transcription} ` +\r\n                     word.translations.map((translation, index) => {\r\n                         let innerHTML =`<br>${index+1}) ${translation.translation}`;\r\n                         if (translation.examples.length !== 0) {\r\n                             innerHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                                 translation.examples.join('; ');\r\n                         }\r\n                         if (translation.synonyms.length !== 0) {\r\n                             innerHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                                 translation.synonyms.join('; ');\r\n                         }\r\n                         if (translation.synonymsEn.length !== 0) {\r\n                             innerHTML += `. <br><span class=\"tabbed\">Synonyms (en):</span> `+\r\n                                 translation.synonymsEn.join('; ');\r\n                         }\r\n                         return innerHTML\r\n                     }).join('')\r\n                }) + '<hr>';\r\n     }\r\n\r\n     static google (data) {\r\n         const grammar = `<span class=\"googleGrammar\"><b>Grammar:</b> ${data.grammar}</span><br>`;\r\n         const definitions = data.definitionLists.map(chunk => {\r\n             return `<b>${chunk.typeOfWord}</b><br><ol>\r\n                ${chunk.list.map(definition => {\r\n                    return `<li>${definition}</li>`\r\n                }).join('')}</ol><hr>`\r\n         });\r\n         const webDefinition = `<b>Web Results:</b><ol>\r\n            ${data.webDefinitionLists.map(row => {\r\n                return `<li>${row}</li>`\r\n            }).join('')}</ol>`;\r\n         document.getElementById('dictionaryBox').innerHTML = grammar + definitions+ webDefinition\r\n     }\r\n\r\n     static showQuestion (word) {\r\n         document.getElementById('questionedWord').textContent = word\r\n     }\r\n\r\n}\r\n\r\n\r\n class LearnMachine {\r\n\r\n     constructor () {\r\n         this.correctAnswers = [];\r\n         this.allWords = []\r\n     }\r\n\r\n     getAllWords () {\r\n        AjaxRequests.getWordList()\r\n            .then(data => {\r\n                this.allWords = JSON.parse(data)\r\n            }, err => {\r\n                throw err\r\n            })\r\n     }\r\n\r\n     checkAnswer () {\r\n         const userAnswer = document.getElementById('answerWord').value;\r\n         if (this.correctAnswers.includes(userAnswer)) {\r\n             console.log('answer is correct')\r\n         } else {\r\n             console.log('answer is incorrect')\r\n         }\r\n     }\r\n\r\n     sendQuestion () {\r\n         const wordNumber = Math.ceil(Math.random()*1000);\r\n         const word = this.allWords[wordNumber].word;\r\n         this.getAnswer(word);\r\n         View.showQuestion(word)\r\n     }\r\n\r\n     getAnswer (word) {\r\n         AjaxRequests.getWordFromServer(word)\r\n             .then(data => {\r\n                 this.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data));\r\n             }, err => {\r\n                 if (err.status === 404) {\r\n                     AjaxRequests.yandexApi(word)\r\n                         .then(data => {\r\n                             this.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data))\r\n                         })\r\n                 }\r\n             })\r\n     }\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n var learningMachine = new LearnMachine();\r\n learningMachine.getAllWords();\r\n \r\n \r\n window.onload = () => {\r\n     setTimeout(() => {\r\n         learningMachine.sendQuestion();\r\n         Controller.listenButtons();\r\n     }, 2500)\r\n };"],"sourceRoot":"/source/"}