{"version":3,"sources":["main.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;;IAGM,U;;;;;;;mCAgCU,CAEX;;;yCAhCwB;AACrB,gBAAI,OAAO,EAAE,OAAF,EAAW,GAAX,EAAX;AACA,gBAAI,WAAW,EAAE,sBAAF,EAA0B,GAA1B,EAAf;AACA,gBAAK,CAAC,IAAF,IAAY,CAAC,QAAjB,EAA4B;AAC5B,cAAE,IAAF,CAAO;AACH,qBAAK,iBADF;AAEH,sBAAM,MAFH;AAGH,sBAAM;AACF,8BADE;AAEF;AAFE;AAHH,aAAP,EAQK,IARL,CAQU,gBAAQ;AACV,qBAAK,UAAL,CAAgB,IAAhB;AACH,aAVL;AAWH;;;qCAEoB;AACjB,gBAAI,OAAO,EAAE,OAAF,EAAW,GAAX,EAAX;AACA,cAAE,IAAF,CAAO;AACH,qBAAK,aADF;AAEH,sBAAM,MAFH;AAGH,sBAAM;AACF;AADE;AAHH,aAAP,EAMG,IANH,CAMQ,gBAAQ;AACZ,wBAAQ,GAAR,CAAY,IAAZ;AACH,aARD;AASH;;;;;;IAQC,I;;;;;;;mCACgB,I,EAAM;AACpB,gBAAI,WAAW,KAAK,KAAL,CAAW,IAAX,CAAf;AACA,gBAAI,SAAS,GAAT,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC/B,gBAAI,iBAAiB,SAAS,GAA9B,CAHoB,CAGe;AACnC,gBAAI,aAAJ;AACA,2BAAe,GAAf,CAAmB,uBAAe;AAAA,oBACzB,IADyB,GACD,YAAY,GAAZ,MADC;AAAA,oBACnB,aADmB,GACsB,YAAY,EAAZ,SAAqB,YAAY,EAAjC,WADtB;;AAE9B,wDAAsC,IAAtC,gBAAqD,aAArD;AACA,oBAAI,eAAe,YAAY,EAA/B;AACA,6BAAa,GAAb,CAAiB,UAAC,WAAD,EAAc,KAAd,EAAwB;AACrC,wBAAI,WAAW,YAAY,EAA3B;AACA,wBAAI,WAAW,YAAY,GAA3B;AACA,wBAAI,WAAW,YAAY,IAA3B;AACA,wBAAI,iBAAiB,YAAY,GAAjC;AACA,wBAAI,iBAAiB,YAAY,IAAjC;AACA,0CAAiB,QAAM,CAAvB,WAA6B,cAA7B;AACA,wBAAI,QAAJ,EAAc;AACV,oCAAY,iDACR,SAAS,GAAT,CAAa,mBAAW;AACxB,gCAAI,cAAc,QAAQ,IAA1B;AACA,gCAAI,uBAAuB,QAAQ,EAAR,CAAW,CAAX,EAAc,IAAzC;AACA,mCAAU,WAAV,WAA2B,oBAA3B;AACH,yBAJG,EAID,IAJC,CAII,EAJJ,EAIQ,KAJR,CAIc,CAJd,EAIgB,CAAC,CAJjB,CADJ;AAMH;AACD,wBAAI,QAAJ,EAAc;AACV,oCAAY,iDACR,SAAS,GAAT,CAAa,mBAAW;AACpB,mCAAU,QAAQ,IAAlB;AACP,yBAFG,EAED,IAFC,CAEI,EAFJ,EAEQ,KAFR,CAEc,CAFd,EAEgB,CAAC,CAFjB,CADJ;AAIH;AACD,wBAAI,QAAJ,EAAc;AACV,oCAAY,wDACR,SAAS,GAAT,CAAa,mBAAW;AACpB,mCAAU,QAAQ,IAAlB;AACH,yBAFD,EAEG,IAFH,CAEQ,EAFR,EAEY,KAFZ,CAEkB,CAFlB,EAEoB,CAAC,CAFrB,CADJ;AAIH;AAEJ,iBA5BD;AA6BH,aAjCD;AAkCA,cAAE,iBAAF,EAAqB,IAArB,CAA0B,QAA1B;AACH;;;;;;AAUL,EAAE,QAAF,EAAY,KAAZ,CAAkB,YAAM;AACpB,MAAE,OAAF,EAAW,GAAX,CAAe,KAAf;AACA,eAAW,cAAX;AACH,CAHD","file":"main-compiled.js","sourcesContent":["/*\r\n parsing from txt.rawData into JSON\r\n let rawData = data.toLowerCase().replace(/[!)(]/g, '');\r\n let regExpGroups = /----- \\d{1,2} -----/g;\r\n let wordGroups = rawData.split(regExpGroups);\r\n let bigList = [];\r\n let wordNumber = 0;\r\n for (let i=1; i<=21; i++) {\r\n let group = wordGroups[i];\r\n let regExpWords = /([\\w'-]+)\\r\\n(?:\\s{4}([ \\w,*'-]+)\\r\\n)?/g;\r\n let regExpResult;\r\n while ((regExpResult = regExpWords.exec(group)) !== null) {\r\n wordNumber++;\r\n let word = {\r\n word: regExpResult[1],\r\n number: wordNumber,\r\n group: i,\r\n differentSpellings: regExpResult[2]\r\n };\r\n if (!word.word.match(/-/)) {\r\n bigList.push(word);\r\n }\r\n }\r\n }\r\n console.log(JSON.stringify(bigList));\r\n */\r\n\r\n/*get sorted Data\r\n$.ajax({\r\n    url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt'\r\n})\r\n.done((data) => {\r\n    let mainWords = JSON.parse(data);\r\n    $.ajax({\r\n            url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/300k.txt'\r\n        })\r\n        .done((data) => {\r\n            let superBigList = [];\r\n\r\n            let powerWordsRaw = data;\r\n            let regExp = /(\\w+)\\s+(\\d+)/g;\r\n            let regExpResult;\r\n            while ((regExpResult = (regExp.exec(powerWordsRaw)))!==null) {\r\n                superBigList.push({\r\n                    word: regExpResult[1],\r\n                    power: parseInt(regExpResult[2])\r\n                })\r\n            }\r\n\r\n\r\n            let power = 3000;\r\n            for (let i=0; i<mainWords.length; i++) {\r\n                let mainWord = mainWords[i];\r\n                for (let j=0; j<superBigList.length; j++) {\r\n                    let powerWord = superBigList[j];\r\n                    if (mainWord.word === powerWord.word) {\r\n                        mainWord.power = powerWord.power;\r\n                        break\r\n                    }\r\n                }\r\n                if (!mainWord.power) {\r\n                    mainWord.power = power;\r\n                    power--\r\n                }\r\n            }\r\n\r\n\r\n            function compare (a,b) {\r\n                if (a.power>b.power) return -1;\r\n                if (a.power<b.power) return 1;\r\n                return 0\r\n            }\r\n            mainWords.sort(compare);\r\n            console.log(JSON.stringify(mainWords))\r\n\r\n\r\n        });\r\n\r\n});\r\n*/\r\n\r\n\r\n//todo - get to work google.api for dictionary (via suspicious site) and yandex.api for translations\r\n\r\n\r\nclass Controller {\r\n\r\n    static getTranslation () {\r\n        let word = $('#word').val();\r\n        let language = $('#translationLanguage').val();\r\n        if ((!word) || (!language)) return;\r\n        $.ajax({\r\n            url: '/getTranslation',\r\n            type: 'POST',\r\n            data: {\r\n                word,\r\n                language\r\n            }\r\n        })\r\n            .then(data => {\r\n                Draw.yandexData(data)\r\n            })\r\n    }\r\n\r\n    static getMeaning () {\r\n        let word = $('#word').val();\r\n        $.ajax({\r\n            url: '/getMeaning',\r\n            type: 'POST',\r\n            data: {\r\n                word\r\n            }\r\n        }).done(data => {\r\n            console.log(data)\r\n        });\r\n    }\r\n\r\n    getWords () {\r\n\r\n    }\r\n\r\n}\r\n\r\nclass Draw {\r\n    static yandexData(data) {\r\n        let response = JSON.parse(data);\r\n        if (response.def.length === 0) return;\r\n        let differentTypes = response.def; //adjective, noun else\r\n        let pageHTML = ``;\r\n        differentTypes.map(description => {\r\n            let [type, transcription] = [description.pos || ``, description.ts ? `[${description.ts}]` : ``];\r\n            pageHTML += `<br><span class=\"ital\">${type}</span> ${transcription} `;\r\n            let translations = description.tr;\r\n            translations.map((translation, index) => {\r\n                let examples = translation.ex;\r\n                let synonyms = translation.syn;\r\n                let meanings = translation.mean;\r\n                let typeTranslated = translation.pos;\r\n                let translatedText = translation.text;\r\n                pageHTML+=`<br>${index+1}) ${translatedText}`;\r\n                if (examples) {\r\n                    pageHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                        examples.map(example => {\r\n                        let exampleText = example.text;\r\n                        let translationOfExample = example.tr[0].text;\r\n                        return `${exampleText} - ${translationOfExample}; `;\r\n                    }).join('').slice(0,-2)\r\n                }\r\n                if (synonyms) {\r\n                    pageHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                        synonyms.map(synonym => {\r\n                            return `${synonym.text}; `\r\n                    }).join('').slice(0,-2)\r\n                }\r\n                if (meanings) {\r\n                    pageHTML += `. <br><span class = \"tabbed\">Synonyms (en):</span> `+\r\n                        meanings.map(meaning => {\r\n                            return `${meaning.text}; `\r\n                        }).join('').slice(0,-2)\r\n                }\r\n\r\n            })\r\n        });\r\n        $('#translationBox').html(pageHTML)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n$(document).ready(() => {\r\n    $('#word').val('cat');\r\n    Controller.getTranslation();\r\n});"]}