{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["\r\n //parsing from txt.rawData into JSON\r\n/*$.ajax({\r\n    url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/bast/Lemmatized/2+2+3frq.txt`\r\n})\r\n    .then(data => {\r\n        //console.log(data);\r\n        let rawData = data.toLowerCase().replace(/[!)(]/g, '');\r\n        let regExpGroups = /----- \\d{1,2} -----/g;\r\n        let wordGroups = rawData.split(regExpGroups);\r\n        let bigList = [];\r\n        let wordNumber = 0;\r\n        for (let i=1; i<=21; i++) {\r\n            let group = wordGroups[i];\r\n            let regExpWords = /([\\w'-]+)\\r\\n(?:\\s{4}([ \\w,*'-]+)\\r\\n)?/g;\r\n            let regExpResult;\r\n            while ((regExpResult = regExpWords.exec(group)) !== null) {\r\n                wordNumber++;\r\n                let word = {\r\n                    word: regExpResult[1],\r\n                    number: wordNumber,\r\n                    group: i,\r\n                    differentSpellings: regExpResult[2]\r\n                };\r\n                if (!word.word.match(/-/)) {\r\n                    bigList.push(word);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        //duplicates\r\n        bigList.splice(19127, 1);\r\n        bigList.splice(2821, 1);\r\n        bigList.splice(10143, 1);\r\n        bigList.splice(10153, 1);\r\n        console.log(((JSON.stringify(bigList))));\r\n        bigList.map((currentWord, index) => {\r\n            let sameWords = bigList.filter(possibleWord => {\r\n                if (currentWord.word === possibleWord.word) {\r\n                    return possibleWord\r\n                }\r\n            });\r\n            if (sameWords.length > 1) {\r\n                console.log(`word ${currentWord.word} has duplicates, index is ${index}`)\r\n            }\r\n        })\r\n    });\r\n*/\r\n\r\n\r\n//get sorted Data\r\n/*$.ajax({\r\n    url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt'\r\n})\r\n.done((data) => {\r\n    let mainWords = JSON.parse(data);\r\n    $.ajax({\r\n            url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/300k.txt'\r\n        })\r\n        .done((data) => {\r\n            let superBigList = [];\r\n\r\n            let powerWordsRaw = data;\r\n            let regExp = /(\\w+)\\s+(\\d+)/g;\r\n            let regExpResult;\r\n            while ((regExpResult = (regExp.exec(powerWordsRaw)))!==null) {\r\n                superBigList.push({\r\n                    word: regExpResult[1],\r\n                    power: parseInt(regExpResult[2])\r\n                })\r\n            }\r\n\r\n\r\n            let power = 3000;\r\n            for (let i=0; i<mainWords.length; i++) {\r\n                let mainWord = mainWords[i];\r\n                for (let j=0; j<superBigList.length; j++) {\r\n                    let powerWord = superBigList[j];\r\n                    if (mainWord.word === powerWord.word) {\r\n                        mainWord.power = powerWord.power;\r\n                        break\r\n                    }\r\n                }\r\n                if (!mainWord.power) {\r\n                    mainWord.power = power;\r\n                    power--\r\n                }\r\n            }\r\n\r\n\r\n            function compare (a,b) {\r\n                if (a.power>b.power) return -1;\r\n                if (a.power<b.power) return 1;\r\n                return 0\r\n            }\r\n            mainWords.sort(compare);\r\n            console.log((JSON.stringify(mainWords)));\r\n\r\n\r\n\r\n        });\r\n\r\n});*/\r\n\r\n\r\n\r\n//todo -  add sound (when u guessed right answer) from fallout4, add authentication (to save user progress)\r\n\r\n\r\n class Controller {\r\n\r\n    static getTranslation() {\r\n        const word = $('#word').val();\r\n        if ((!word)) return;\r\n        AjaxRequests.getWordFromServer(word)\r\n            .then(data => {\r\n                Draw.yandex(YandexParse.getData(data))\r\n            }, err => {\r\n                if (err.status === 404) {\r\n                    AjaxRequests.yandexApi(word)\r\n                        .then(data => {\r\n                            Draw.yandex(YandexParse.getData(data))\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    static getMeaning() {\r\n        const word = $('#word').val();\r\n        if ((!word)) return;\r\n        AjaxRequests.googleApi(word)\r\n            .then(data => {\r\n                Draw.google(GoogleParse.getData(data))\r\n            })\r\n    }\r\n\r\n    getWords() {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n class AjaxRequests {\r\n\r\n     static yandexApi(word) {\r\n         return new Promise (resolve => {\r\n             $.ajax({\r\n                 url: '/getTranslation',\r\n                 type: 'POST',\r\n                 data: {\r\n                     word\r\n                 }\r\n             }).done(data => {\r\n                 resolve(data)\r\n             });\r\n         });\r\n     }\r\n\r\n     static googleApi (word) {\r\n         return new Promise (resolve => {\r\n             $.ajax({\r\n                 url: '/getMeaning',\r\n                 type: 'POST',\r\n                 data: {\r\n                     word\r\n                 }\r\n             }).done(data => {\r\n                 resolve(data)\r\n             });\r\n         });\r\n     }\r\n\r\n     static getWordFromServer (word) {\r\n         return new Promise ((resolve, reject) => {\r\n             $.ajax({\r\n                 url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/yandexTranslations/${word}.txt`,\r\n                 type: 'GET'\r\n             }).done(data => {\r\n                 resolve(data)\r\n             }).catch(err => {\r\n                 reject (err)\r\n             })\r\n         })\r\n     }\r\n\r\n     static getWordList () {\r\n         return new Promise ((resolve, reject) => {\r\n             $.ajax({\r\n                 url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt`,\r\n                 type: 'GET'\r\n             }).done(data => {\r\n                 resolve(data)\r\n             }).catch(err => {\r\n                 reject (err)\r\n             })\r\n         })\r\n     }\r\n\r\n }\r\n\r\n class YandexParse {\r\n\r\n    static getData (rawData) {\r\n        const data = JSON.parse(rawData);\r\n        if (data.def.length === 0) return;\r\n        return data.def.map(description => {\r\n            return {\r\n                type: description.pos || ``,\r\n                transcription: description.ts ? `[${description.ts}]` : ``,\r\n                translations: description.tr\r\n                    .map(translation => {\r\n                        return {\r\n                            examples: YandexParse.transformExamples(translation.ex),\r\n                            synonyms: YandexParse.transformSynonyms(translation.syn),\r\n                            synonymsEn: YandexParse.transformSynonyms(translation.mean),\r\n                            translationType: translation.pos,\r\n                            translation: translation.text\r\n                        };\r\n                    })\r\n\r\n            };\r\n        })\r\n    }\r\n\r\n    static transformExamples (examples = []) {\r\n        return examples.map(example => {\r\n            return `${example.text} - ${example.tr[0].text}`\r\n        })\r\n    }\r\n\r\n    static transformSynonyms (synonyms = []) {\r\n        return synonyms.map(synonym => {\r\n            return synonym.text\r\n        })\r\n    }\r\n\r\n    static findCorrectAnswers (parsedWords) {\r\n        return parsedWords.map(word => {\r\n            return word.translations.map(translation => {\r\n                return translation.translation.toLowerCase()\r\n            })\r\n        }).reduce((previousWords, currentWord) => {\r\n            return previousWords.concat(currentWord)\r\n        }, [])\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n class GoogleParse {\r\n\r\n     static getData (rawData) {\r\n         return {\r\n             definitionLists : GoogleParse.findDefinitionLists(GoogleParse.findDefinitionChunks(rawData)),\r\n             webDefinitionLists: GoogleParse.findWebDefinitionLists(GoogleParse.findWebDefinitionChunk(rawData)),\r\n             grammar: GoogleParse.findGrammar(rawData)\r\n         }\r\n     }\r\n\r\n     static findDefinitionChunks(rawData) {\r\n         const regExp = /<b>(.*)\\n[\\s\\S]*?<\\/[\\s\\S]*?<div class=std style=\"padding-left:40px\">([\\s\\S]*?)(<div id=\"forEmbed\">|<hr>)/g;\r\n         let regExpResult;\r\n         let definitionsChunks = [];\r\n         while ((regExpResult = regExp.exec(rawData)) !== null) {\r\n             definitionsChunks.push({\r\n                 typeOfWord: regExpResult[1],\r\n                 body: regExpResult[2]\r\n             })\r\n         }\r\n         return definitionsChunks\r\n     }\r\n\r\n     static findDefinitionLists(chunks) {\r\n         return chunks.map(chunk => {\r\n             const list = chunk.body.split(/<li style=\"list-style:decimal\">/g).slice(1).map(listValue => {\r\n                return GoogleParse.deleteUnnecessaryRow(listValue)\r\n             });\r\n             return {\r\n                 typeOfWord: chunk.typeOfWord,\r\n                 list\r\n             }\r\n         })\r\n     }\r\n\r\n     static deleteUnnecessaryRow(listValue) {\r\n         const regExp = /color:#767676/;\r\n         if (listValue.match(regExp)) {\r\n             return listValue\r\n         } else {\r\n             return listValue.replace(/<div[\\s\\S]*<\\/div>/, '')\r\n         }\r\n     }\r\n\r\n\r\n     static findWebDefinitionChunk(rawData) {\r\n         const regExp = /Web Definitions[\\s\\S]*<\\/ol>/g;\r\n         return rawData.match(regExp)[0];\r\n     }\r\n\r\n     static findWebDefinitionLists (chunk) {\r\n         let webList = [];\r\n         const regExp = /<li style=\"list-style:decimal; margin-bottom:10px;\">([\\s\\S]*?)<\\/li>/g;\r\n         let regExpResult;\r\n         while ((regExpResult = regExp.exec(chunk)) !== null) {\r\n             webList.push(regExpResult[1])\r\n         }\r\n         return webList\r\n     }\r\n\r\n     static findGrammar (rawData) {\r\n         const regExp = /<span style=\"color:#767676\">([\\s\\S]*?)<\\/span>/;\r\n         return rawData.match(regExp)[1].slice(0,-2);\r\n     }\r\n }\r\n\r\n\r\n class Draw {\r\n\r\n     static yandex (words) {\r\n         const divHTML = words.map(word => {\r\n             return `<br><span class=\"ital\"><b>${word.type}</b></span> ${word.transcription} ` +\r\n                 word.translations.map((translation, index) => {\r\n                     let innerHTML =`<br>${index+1}) ${translation.translation}`;\r\n                     if (translation.examples.length !== 0) {\r\n                         innerHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                             translation.examples.join('; ');\r\n                     }\r\n                     if (translation.synonyms.length !== 0) {\r\n                         innerHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                             translation.synonyms.join('; ');\r\n                     }\r\n                     if (translation.synonymsEn.length !== 0) {\r\n                         innerHTML += `. <br><span class=\"tabbed\">Synonyms (en):</span> `+\r\n                             translation.synonymsEn.join('; ');\r\n                     }\r\n                     return innerHTML\r\n                 }).join('')\r\n            }) + '<hr>';\r\n         $('#translationBox').html(divHTML)\r\n     }\r\n\r\n     static google (data) {\r\n         const grammar = `<span class=\"googleGrammar\"><b>Grammar:</b> ${data.grammar}</span><br>`;\r\n         const definitions = data.definitionLists.map(chunk => {\r\n             return `<b>${chunk.typeOfWord}</b><br><ol>\r\n                ${chunk.list.map(definition => {\r\n                    return `<li>${definition}</li>`\r\n                }).join('')}</ol><hr>`\r\n         });\r\n         const webDefinition = `<b>Web Results:</b><ol>\r\n            ${data.webDefinitionLists.map(row => {\r\n                return `<li>${row}</li>`\r\n            }).join('')}</ol>`;\r\n         $('#dictionaryBox').html(grammar+definitions+webDefinition)\r\n     }\r\n\r\n}\r\n\r\n\r\n class LearnMachine {\r\n\r\n     constructor () {\r\n         this.correctAnswers = [];\r\n         this.allWords = []\r\n     }\r\n\r\n     getAllWords () {\r\n        AjaxRequests.getWordList()\r\n            .then(data => {\r\n                this.allWords = JSON.parse(data)\r\n            }, err => {\r\n                throw err\r\n            })\r\n     }\r\n\r\n     checkAnswer () {\r\n         const userAnswer = $('#answerWord').val();\r\n         if (this.correctAnswers.includes(userAnswer)) {\r\n             console.log('answer is correct')\r\n         } else {\r\n             console.log('answer is incorrect')\r\n         }\r\n     }\r\n\r\n     sendQuestion () {\r\n         const wordNumber = Math.ceil(Math.random()*1000);\r\n         const word = this.allWords[wordNumber].word;\r\n         $('#questionedWord').text(word);\r\n         this.getAnswer(word)\r\n     }\r\n\r\n     getAnswer (word) {\r\n         AjaxRequests.getWordFromServer(word)\r\n             .then(data => {\r\n                 this.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data))\r\n             }, err => {\r\n                 if (err.status === 404) {\r\n                     AjaxRequests.yandexApi(word)\r\n                         .then(data => {\r\n                             this.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data))\r\n                         })\r\n                 }\r\n             })\r\n     }\r\n\r\n }\r\n\r\n\r\n\r\n\r\n /*AjaxRequests.googleApi('cat')\r\n     .then(data => {\r\n         Draw.google(GoogleParse.getData(data))\r\n     });*/\r\n\r\n let learningMachine = new LearnMachine();\r\n learningMachine.getAllWords();\r\n\r\n $(document).ready(() => {\r\n     setTimeout(() => {\r\n         learningMachine.sendQuestion()\r\n     }, 2500)\r\n });"]}