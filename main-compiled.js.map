{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["\r\n //parsing from txt.rawData into JSON\r\n/*$.ajax({\r\n    url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/bast/Lemmatized/2+2+3frq.txt`\r\n})\r\n    .then(data => {\r\n        //console.log(data);\r\n        let rawData = data.toLowerCase().replace(/[!)(]/g, '');\r\n        let regExpGroups = /----- \\d{1,2} -----/g;\r\n        let wordGroups = rawData.split(regExpGroups);\r\n        let bigList = [];\r\n        let wordNumber = 0;\r\n        for (let i=1; i<=21; i++) {\r\n            let group = wordGroups[i];\r\n            let regExpWords = /([\\w'-]+)\\r\\n(?:\\s{4}([ \\w,*'-]+)\\r\\n)?/g;\r\n            let regExpResult;\r\n            while ((regExpResult = regExpWords.exec(group)) !== null) {\r\n                wordNumber++;\r\n                let word = {\r\n                    word: regExpResult[1],\r\n                    number: wordNumber,\r\n                    group: i,\r\n                    differentSpellings: regExpResult[2]\r\n                };\r\n                if (!word.word.match(/-/)) {\r\n                    bigList.push(word);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        //duplicates\r\n        bigList.splice(19127, 1);\r\n        bigList.splice(2821, 1);\r\n        bigList.splice(10143, 1);\r\n        bigList.splice(10153, 1);\r\n        console.log(((JSON.stringify(bigList))));\r\n        bigList.map((currentWord, index) => {\r\n            let sameWords = bigList.filter(possibleWord => {\r\n                if (currentWord.word === possibleWord.word) {\r\n                    return possibleWord\r\n                }\r\n            });\r\n            if (sameWords.length > 1) {\r\n                console.log(`word ${currentWord.word} has duplicates, index is ${index}`)\r\n            }\r\n        })\r\n    });\r\n*/\r\n\r\n\r\n//get sorted Data\r\n/*$.ajax({\r\n    url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/sorted_34k.txt'\r\n})\r\n.done((data) => {\r\n    let mainWords = JSON.parse(data);\r\n    $.ajax({\r\n            url: 'http://tup1tsa.bounceme.net/learnWords/wordsLists/rawLists/300k.txt'\r\n        })\r\n        .done((data) => {\r\n            let superBigList = [];\r\n\r\n            let powerWordsRaw = data;\r\n            let regExp = /(\\w+)\\s+(\\d+)/g;\r\n            let regExpResult;\r\n            while ((regExpResult = (regExp.exec(powerWordsRaw)))!==null) {\r\n                superBigList.push({\r\n                    word: regExpResult[1],\r\n                    power: parseInt(regExpResult[2])\r\n                })\r\n            }\r\n\r\n\r\n            let power = 3000;\r\n            for (let i=0; i<mainWords.length; i++) {\r\n                let mainWord = mainWords[i];\r\n                for (let j=0; j<superBigList.length; j++) {\r\n                    let powerWord = superBigList[j];\r\n                    if (mainWord.word === powerWord.word) {\r\n                        mainWord.power = powerWord.power;\r\n                        break\r\n                    }\r\n                }\r\n                if (!mainWord.power) {\r\n                    mainWord.power = power;\r\n                    power--\r\n                }\r\n            }\r\n\r\n\r\n            function compare (a,b) {\r\n                if (a.power>b.power) return -1;\r\n                if (a.power<b.power) return 1;\r\n                return 0\r\n            }\r\n            mainWords.sort(compare);\r\n            console.log((JSON.stringify(mainWords)));\r\n\r\n\r\n\r\n        });\r\n\r\n});*/\r\n\r\n\r\n\r\n//todo - get to work google.api for dictionary (via suspicious site) - (get web translation, add noun/verb type), add sound (when u guessed right answer) from fallout4\r\n\r\n\r\n class Controller {\r\n\r\n    static getTranslation() {\r\n        let word = $('#word').val();\r\n        if ((!word)) return;\r\n        AjaxRequests.getWordFromServer(word)\r\n            .then(data => {\r\n                let parsedData = Parse.yandex(data);\r\n                Draw.yandexData(parsedData)\r\n            }, err => {\r\n                if (err.status === 404) {\r\n                    AjaxRequests.yandexApi(word)\r\n                        .then(data => {\r\n                            let parsedData = Parse.yandex(data);\r\n                            Draw.yandexData(parsedData)\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    static getMeaning() {\r\n        let word = $('#word').val();\r\n        AjaxRequests.googleApi(word)\r\n            .then(data => {\r\n                Draw.googleData(data)\r\n            })\r\n    }\r\n\r\n    getWords() {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n class AjaxRequests {\r\n\r\n     static yandexApi(word) {\r\n         return new Promise (resolve => {\r\n             $.ajax({\r\n                 url: '/getTranslation',\r\n                 type: 'POST',\r\n                 data: {\r\n                     word\r\n                 }\r\n             }).done(data => {\r\n                 resolve(data)\r\n             });\r\n         });\r\n     }\r\n\r\n     static googleApi (word) {\r\n         return new Promise (resolve => {\r\n             $.ajax({\r\n                 url: '/getMeaning',\r\n                 type: 'POST',\r\n                 data: {\r\n                     word\r\n                 }\r\n             }).done(data => {\r\n                 resolve(data)\r\n             });\r\n         });\r\n\r\n     }\r\n\r\n     static getWordFromServer (word) {\r\n         return new Promise ((resolve, reject) => {\r\n             $.ajax({\r\n                 url: `http://tup1tsa.bounceme.net/learnWords/wordsLists/yandexTranslations/${word}.txt`,\r\n                 type: 'GET'\r\n             }).done(data => {\r\n                 resolve(data)\r\n             }).catch(err => {\r\n                 reject (err)\r\n             })\r\n         })\r\n     }\r\n\r\n\r\n }\r\n\r\nclass Parse {\r\n\r\n    static yandex (rawData) {\r\n        let data = JSON.parse(rawData);\r\n        if (data.def.length === 0) return;\r\n        let wordFullData = {\r\n            chunks: data.def, //adjective, noun, etc;\r\n            correctAnswers: []\r\n        };\r\n        wordFullData.chunks = wordFullData.chunks.map(description => {\r\n            return {\r\n                type: description.pos || ``,\r\n                transcription: description.ts ? `[${description.ts}]` : ``,\r\n                translations: description.tr\r\n                    .map(translation => {\r\n                        wordFullData.correctAnswers.push(translation.text);\r\n                        return {\r\n                            examples: Parse.transformExamples(translation.ex),\r\n                            synonyms: Parse.transformSynonyms(translation.syn),\r\n                            synonymsEn: Parse.transformSynonyms(translation.mean),\r\n                            translationType: translation.pos,\r\n                            translation: translation.text\r\n                        };\r\n                    })\r\n\r\n            };\r\n        });\r\n        return wordFullData\r\n    }\r\n\r\n    static transformExamples (examples = []) {\r\n        return examples.map(example => {\r\n            return `${example.text} - ${example.tr[0].text}`\r\n        })\r\n    }\r\n\r\n    static transformSynonyms (synonyms = []) {\r\n        return synonyms.map(synonym => {\r\n            return synonym.text\r\n        })\r\n    }\r\n}\r\n\r\n\r\n class Draw {\r\n\r\n    static yandexData(data) {\r\n        let response = JSON.parse(data);\r\n        if (response.def.length === 0) return;\r\n        let differentTypes = response.def; //adjective, noun else\r\n        let divHTML = ``;\r\n        differentTypes.map(description => {\r\n            let [type, transcription] = [description.pos || ``, description.ts ? `[${description.ts}]` : ``];\r\n            divHTML += `<br><span class=\"ital\"><b>${type}</b></span> ${transcription} `;\r\n            let translations = description.tr;\r\n            translations.map((translation, index) => {\r\n                let examples = translation.ex;\r\n                let synonyms = translation.syn;\r\n                let meanings = translation.mean;\r\n                let typeTranslated = translation.pos;\r\n                let translatedText = translation.text;\r\n                divHTML+=`<br>${index+1}) ${translatedText}`;\r\n                if (examples) {\r\n                    divHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                        examples.map(example => {\r\n                        let exampleText = example.text;\r\n                        let translationOfExample = example.tr[0].text;\r\n                        return `${exampleText} - ${translationOfExample}; `;\r\n                    }).join('').slice(0,-2)\r\n                }\r\n                if (synonyms) {\r\n                    divHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                        synonyms.map(synonym => {\r\n                            return `${synonym.text}; `\r\n                    }).join('').slice(0,-2)\r\n                }\r\n                if (meanings) {\r\n                    divHTML += `. <br><span class = \"tabbed\">Synonyms (en):</span> `+\r\n                        meanings.map(meaning => {\r\n                            return `${meaning.text}; `\r\n                        }).join('').slice(0,-2)\r\n                }\r\n\r\n            })\r\n        });\r\n        divHTML += '<hr>';\r\n        $('#translationBox').html(divHTML)\r\n    }\r\n\r\n\r\n     static yandexNew (data) {\r\n         let words = data.chunks;\r\n         let divHTML = ``;\r\n         words.map(word => {\r\n             divHTML += `<br><span class=\"ital\"><b>${word.type}</b></span> ${word.transcription} `;\r\n             word.translations.map((translation, index) => {\r\n                 divHTML+=`<br>${index+1}) ${translation.translation}`;\r\n                 if (translation.examples.length !== 0) {\r\n                     divHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                         translation.examples.join('; ');\r\n                 }\r\n                 if (translation.synonyms.length !== 0) {\r\n                     divHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                         translation.synonyms.join('; ');\r\n                 }\r\n                 if (translation.synonymsEn.length !== 0) {\r\n                     divHTML += `. <br><span class=\"tabbed\">Synonyms (en):</span> `+\r\n                         translation.synonymsEn.join('; ');\r\n                 }\r\n             })\r\n         });\r\n         divHTML += '<hr>';\r\n         $('#translationBox').html(divHTML)\r\n     }\r\n\r\n    static googleData (data) {\r\n        let divHTML = ``;\r\n        let regExpChunk = /<b>(.*)\\n[\\s\\S]*?<\\/[\\s\\S]*?<div class=std style=\"padding-left:40px\">([\\s\\S]*?)(<div id=\"forEmbed\">|<hr>)/g;\r\n        let regExpResultChunk;\r\n        let definitionsChunks = [];\r\n        while ((regExpResultChunk = regExpChunk.exec(data)) !== null) {\r\n            definitionsChunks.push({\r\n                typeOfWord: regExpResultChunk[1],\r\n                body: regExpResultChunk[2]\r\n            })\r\n        }\r\n        definitionsChunks.map(chunk => {\r\n            let orderedList = chunk.body.split(/<li style=\"list-style:decimal\">/g);\r\n            orderedList.shift();\r\n            divHTML += `<b>${chunk.typeOfWord}</b><br><ol>\r\n                ${orderedList.map(definition => {\r\n                    return `<li>${definition.slice(0,-10)}</li>`\r\n                }).join('')}</ol><hr>`\r\n        });\r\n\r\n\r\n        let regExpWeb = /Web Definitions[\\s\\S]*<\\/ol>/g;\r\n        let webResultChunk = data.match(regExpWeb)[0];\r\n        let webList = [];\r\n        let regExpWebList = /<li style=\"list-style:decimal; margin-bottom:10px;\">([\\s\\S]*?)<\\/li>/g;\r\n        let regExpWebListResult;\r\n        while ((regExpWebListResult = regExpWebList.exec(webResultChunk)) !== null) {\r\n            webList.push(regExpWebListResult[1])\r\n        }\r\n        divHTML += `<b>Web Results:</b><ol>\r\n            ${webList.map(part => {\r\n                return `<li>${part}</li>`\r\n            }).join('')}</ol>`;\r\n\r\n\r\n        let regExpGrammar = /<span style=\"color:#767676\">([\\s\\S]*?)<\\/span>/;\r\n        let grammarText = `<span class=\"googleGrammar\"><b>Grammar:</b> ${data.match(regExpGrammar)[1]}</span><br>`;\r\n\r\n        \r\n        $('#dictionaryBox').html(divHTML).prepend(grammarText);\r\n    }\r\n}\r\n\r\n\r\n class LearnMachine {\r\n\r\n     constructor () {\r\n         this.correctAnswers = []\r\n     }\r\n\r\n     setCorrectAnswers () {\r\n\r\n     }\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n$(document).ready(() => {\r\n\r\n});\r\n\r\n let learningMachine = new LearnMachine();\r\n\r\nAjaxRequests.getWordFromServer('run')\r\n .then(data => {\r\n     console.log(Parse.yandex(data));\r\n    Draw.yandexNew(Parse.yandex(data));\r\n\r\n });"]}