{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/whatwg-fetch/fetch.js","public/learnWords/js/authentication.js","public/learnWords/js/main.js"],"names":[],"mappingsjbA;;;;AAII,sBAAe;AAAA;AAEd;;;;wCAEgB;AACb,gBAAM,WAAW,KAAK,iBAAL,EAAjB;AACA,gBAAI,QAAJ,EAAc;AACV,oBAAM,gBAAgB,KAAK,WAAL,CAAiB,QAAjB,CAAtB;AACA,sBAAM,OAAN,EAAe;AACX,4BAAO,MADI;AAEX,6BAAS;AACL,wCAAgB,kBADX;AAEL,yCAAiB;AAFZ;AAFE,iBAAf,EAOK,IAPL,CAOU,oBAAY;AACd,4BAAQ,GAAR,CAAY,QAAZ;AACH,iBATL;AAUH,aAZD,MAYO;AACH,sBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACH;AACJ;;;4CAEoB;AACjB,gBAAI,OAAO,aAAa,OAAb,CAAqB,UAArB,CAAX;AACA,gBAAI,WAAW,aAAa,OAAb,CAAqB,cAArB,CAAf;AACA,gBAAI,EAAE,QAAQ,QAAV,CAAJ,EAAyB;AACrB,uBAAO,SAAS,cAAT,CAAwB,OAAxB,EAAiC,KAAxC;AACA,2BAAW,SAAS,cAAT,CAAwB,UAAxB,EAAoC,KAA/C;AACH;AACD,gBAAI,QAAQ,QAAZ,EAAsB;AAClB,uBAAO;AACH,8BADG;AAEH;AAFG,iBAAP;AAIH;AACJ;;;oCAEY,Q,EAAU;AACnB,mBAAO,KAAQ,SAAS,IAAjB,SAAyB,SAAS,QAAlC,CAAP;AACH;;;;;;;;;;;;;AC1CL;;;;;;;;AAFA;AACA,QAAQ,cAAR;;IAIO,U;;;;;;;yCAEqB;AACpB,gBAAM,OAAO,SAAS,cAAT,CAAwB,MAAxB,EAAgC,KAA7C;AACA,gBAAK,CAAC,IAAN,EAAa;AACb,yBAAa,iBAAb,CAA+B,IAA/B,EACK,IADL,CACU,gBAAQ;AACV,qBAAK,MAAL,CAAY,YAAY,OAAZ,CAAoB,IAApB,CAAZ;AACH,aAHL,EAGO,eAAO;AACN,oBAAI,IAAI,MAAJ,KAAe,GAAnB,EAAwB;AACpB,iCAAa,SAAb,CAAuB,IAAvB,EACK,IADL,CACU,gBAAQ;AACV,6BAAK,MAAL,CAAY,YAAY,OAAZ,CAAoB,IAApB,CAAZ;AACH,qBAHL;AAIH;AACJ,aAVL;AAWH;;;qCAEmB;AAChB,gBAAM,OAAO,SAAS,cAAT,CAAwB,MAAxB,EAAgC,KAA7C;AACA,gBAAK,CAAC,IAAN,EAAa;AACb,yBAAa,SAAb,CAAuB,IAAvB,EACK,IADL,CACU,gBAAQ;AACV,qBAAK,MAAL,CAAY,YAAY,OAAZ,CAAoB,IAApB,CAAZ;AACH,aAHL;AAIH;;;wCAEuB;AACpB,qBAAS,cAAT,CAAwB,YAAxB,EAAsC,OAAtC,GAAgD,WAAW,UAA3D;AACA,qBAAS,cAAT,CAAwB,gBAAxB,EAA0C,OAA1C,GAAqD,WAAW,cAAhE;AACA,qBAAS,cAAT,CAAwB,aAAxB,EAAuC,OAAvC,GAAiD,gBAAgB,WAAhB,CAA4B,IAA5B,CAAiC,eAAjC,CAAjD;AACA,qBAAS,cAAT,CAAwB,cAAxB,EAAwC,OAAxC,GAAkD,gBAAgB,YAAhB,CAA6B,IAA7B,CAAkC,eAAlC,CAAlD;AACA,qBAAS,cAAT,CAAwB,UAAxB,EAAoC,OAApC,GAA8C,YAAM;AAChD,oBAAI,OAAO,8BAAX;AACA,qBAAK,aAAL;AACH,aAHD;AAIH;;;;;;IAKE,Y;;;;;;;oCAEkB,Q,EAAU;AAC1B,gBAAI,SAAS,MAAT,IAAmB,GAAnB,IAA0B,SAAS,MAAT,GAAkB,GAAhD,EAAqD;AACjD,uBAAO,QAAP;AACH,aAFD,MAEO;AACH,oBAAM,QAAQ,IAAI,KAAJ,CAAU,SAAS,UAAnB,CAAd;AACA,sBAAM,QAAN,GAAiB,QAAjB;AACA,sBAAM,KAAN;AACH;AACJ;;;kCAEgB,I,EAAM;AACpB,mBAAO,IAAI,OAAJ,CAAY,mBAAW;AAC3B,sBAAM,4BAAN,EAAoC;AAChC,4BAAQ,MADwB;AAEhC,6BAAS;AACL,wCAAgB;AADX,qBAFuB;AAKhC,0BAAM,KAAK,SAAL,CAAe;AACjB;AADiB,qBAAf;AAL0B,iBAApC,EASK,IATL,CASU,aAAa,WATvB,EAUK,IAVL,CAUU,oBAAY;AACd,4BAAS,SAAS,IAAT,EAAT;AACH,iBAZL;AAcF,aAfM,CAAP;AAgBF;;;kCAEiB,I,EAAM;AACpB,mBAAO,IAAI,OAAJ,CAAa,mBAAW;AAC5B,sBAAM,wBAAN,EAAgC;AAC5B,4BAAQ,MADoB;AAE5B,6BAAS;AACL,wCAAgB;AADX,qBAFmB;AAK5B,0BAAM,KAAK,SAAL,CAAe;AACjB;AADiB,qBAAf;AALsB,iBAAhC,EASK,IATL,CASU,aAAa,WATvB,EAUK,IAVL,CAUU,oBAAY;AACd,4BAAQ,SAAS,IAAT,EAAR;AACH,iBAZL;AAaF,aAdM,CAAP;AAeH;;;0CAEyB,I,EAAM;AAC5B,mBAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAS,MAAT,EAAoB;AACpC,gGAA8E,IAA9E,WACK,IADL,CACU,aAAa,WADvB,EAEK,IAFL,CAEU,oBAAY;AACd,4BAAQ,SAAS,IAAT,EAAR;AACH,iBAJL,EAIO,eAAO;AACN,2BAAO,GAAP;AACH,iBANL;AAOH,aARM,CAAP;AASH;;;sCAEqB;AAClB,mBAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,gGACK,IADL,CACU,aAAa,WADvB,EAEK,IAFL,CAEU,oBAAY;AACd,4BAAQ,SAAS,IAAT,EAAR;AACH,iBAJL,EAIO,eAAO;AACN,2BAAO,GAAP;AACH,iBANL;AAOH,aARM,CAAP;AASH;;;kCAEiB,I,EAAM;AACpB,mBAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,sBAAM,OAAN,EAAe;AACX,4BAAQ,MADG;AAEX,6BAAS;AACL,wCAAgB;AADX,qBAFE;AAKX,0BAAM,KAAK,SAAL,CAAe,IAAf;AALK,iBAAf,EAOK,IAPL,CAOU,aAAa,WAPvB,EAQK,IARL,CAQU,oBAAY;AACd,4BAAQ,SAAS,IAAT,EAAR;AACH,iBAVL,EAUO,eAAO;AACN,2BAAO,GAAP;AACH,iBAZL;AAaH,aAdM,CAAP;AAeH;;;;;;IAIC,W;;;;;;;gCAEa,Q,EAAU;AACtB,gBAAI,SAAS,GAAT,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC/B,mBAAO,SAAS,GAAT,CAAa,GAAb,CAAiB,uBAAe;AACnC,uBAAO;AACH,0BAAM,YAAY,GAAZ,MADH;AAEH,mCAAe,YAAY,EAAZ,SAAqB,YAAY,EAAjC,WAFZ;AAGH,kCAAc,YAAY,EAAZ,CACT,GADS,CACL,uBAAe;AAChB,+BAAO;AACH,sCAAU,YAAY,iBAAZ,CAA8B,YAAY,EAA1C,CADP;AAEH,sCAAU,YAAY,iBAAZ,CAA8B,YAAY,GAA1C,CAFP;AAGH,wCAAY,YAAY,iBAAZ,CAA8B,YAAY,IAA1C,CAHT;AAIH,6CAAiB,YAAY,GAJ1B;AAKH,yCAAa,YAAY;AALtB,yBAAP;AAOH,qBATS;;AAHX,iBAAP;AAeH,aAhBM,CAAP;AAiBH;;;4CAEwC;AAAA,gBAAf,QAAe,yDAAJ,EAAI;;AACrC,mBAAO,SAAS,GAAT,CAAa,mBAAW;AAC3B,uBAAU,QAAQ,IAAlB,WAA4B,QAAQ,EAAR,CAAW,CAAX,EAAc,IAA1C;AACH,aAFM,CAAP;AAGH;;;4CAEwC;AAAA,gBAAf,QAAe,yDAAJ,EAAI;;AACrC,mBAAO,SAAS,GAAT,CAAa,mBAAW;AAC3B,uBAAO,QAAQ,IAAf;AACH,aAFM,CAAP;AAGH;;;2CAE0B,W,EAAa;AACpC,mBAAO,YAAY,GAAZ,CAAgB,gBAAQ;AAC3B,uBAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,uBAAe;AACxC,2BAAO,YAAY,WAAZ,CAAwB,WAAxB,EAAP;AACH,iBAFM,CAAP;AAGH,aAJM,EAIJ,MAJI,CAIG,UAAC,aAAD,EAAgB,WAAhB,EAAgC;AACtC,uBAAO,cAAc,MAAd,CAAqB,WAArB,CAAP;AACH,aANM,EAMJ,EANI,CAAP;AAOH;;;;;;IAME,W;;;;;;;gCAEc,O,EAAS;AACrB,mBAAO;AACH,iCAAkB,YAAY,mBAAZ,CAAgC,YAAY,oBAAZ,CAAiC,OAAjC,CAAhC,CADf;AAEH,oCAAoB,YAAY,sBAAZ,CAAmC,YAAY,sBAAZ,CAAmC,OAAnC,CAAnC,CAFjB;AAGH,yBAAS,YAAY,WAAZ,CAAwB,OAAxB;AAHN,aAAP;AAKH;;;6CAE2B,O,EAAS;AACjC,gBAAM,SAAS,4GAAf;AACA,gBAAI,qBAAJ;AACA,gBAAI,oBAAoB,EAAxB;AACA,mBAAO,CAAC,eAAe,OAAO,IAAP,CAAY,OAAZ,CAAhB,MAA0C,IAAjD,EAAuD;AACnD,kCAAkB,IAAlB,CAAuB;AACnB,gCAAY,aAAa,CAAb,CADO;AAEnB,0BAAM,aAAa,CAAb;AAFa,iBAAvB;AAIH;AACD,mBAAO,iBAAP;AACH;;;4CAE0B,M,EAAQ;AAC/B,mBAAO,OAAO,GAAP,CAAW,iBAAS;AACvB,oBAAM,OAAO,MAAM,IAAN,CAAW,KAAX,CAAiB,kCAAjB,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,GAA9D,CAAkE,qBAAa;AACzF,2BAAO,YAAY,oBAAZ,CAAiC,SAAjC,CAAP;AACF,iBAFY,CAAb;AAGA,uBAAO;AACH,gCAAY,MAAM,UADf;AAEH;AAFG,iBAAP;AAIH,aARM,CAAP;AASH;;;6CAE2B,S,EAAW;AACnC,gBAAM,SAAS,eAAf;AACA,gBAAI,UAAU,KAAV,CAAgB,MAAhB,CAAJ,EAA6B;AACzB,uBAAO,SAAP;AACH,aAFD,MAEO;AACH,uBAAO,UAAU,OAAV,CAAkB,oBAAlB,EAAwC,EAAxC,CAAP;AACH;AACJ;;;+CAG6B,O,EAAS;AACnC,gBAAM,SAAS,+BAAf;AACA,mBAAO,QAAQ,KAAR,CAAc,MAAd,EAAsB,CAAtB,CAAP;AACH;;;+CAE8B,K,EAAO;AAClC,gBAAI,UAAU,EAAd;AACA,gBAAM,SAAS,uEAAf;AACA,gBAAI,qBAAJ;AACA,mBAAO,CAAC,eAAe,OAAO,IAAP,CAAY,KAAZ,CAAhB,MAAwC,IAA/C,EAAqD;AACjD,wBAAQ,IAAR,CAAa,aAAa,CAAb,CAAb;AACH;AACD,mBAAO,OAAP;AACH;;;oCAEmB,O,EAAS;AACzB,gBAAM,SAAS,gDAAf;AACA,mBAAO,QAAQ,KAAR,CAAc,MAAd,EAAsB,CAAtB,EAAyB,KAAzB,CAA+B,CAA/B,EAAiC,CAAC,CAAlC,CAAP;AACH;;;;;;IAIC,I;;;;;;;+BAEa,K,EAAO;AAClB,qBAAS,cAAT,CAAwB,gBAAxB,EAA0C,SAA1C,GACI,MAAM,GAAN,CAAU,gBAAQ;AACd,uBAAO,+BAA6B,KAAK,IAAlC,oBAAqD,KAAK,aAA1D,SACH,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAC,WAAD,EAAc,KAAd,EAAwB;AAC1C,wBAAI,sBAAkB,QAAM,CAAxB,WAA8B,YAAY,WAA9C;AACA,wBAAI,YAAY,QAAZ,CAAqB,MAArB,KAAgC,CAApC,EAAuC;AACnC,qCAAa,iDACT,YAAY,QAAZ,CAAqB,IAArB,CAA0B,IAA1B,CADJ;AAEH;AACD,wBAAI,YAAY,QAAZ,CAAqB,MAArB,KAAgC,CAApC,EAAuC;AACnC,qCAAa,iDACT,YAAY,QAAZ,CAAqB,IAArB,CAA0B,IAA1B,CADJ;AAEH;AACD,wBAAI,YAAY,UAAZ,CAAuB,MAAvB,KAAkC,CAAtC,EAAyC;AACrC,qCAAa,sDACT,YAAY,UAAZ,CAAuB,IAAvB,CAA4B,IAA5B,CADJ;AAEH;AACD,2BAAO,SAAP;AACH,iBAfD,EAeG,IAfH,CAeQ,EAfR,CADJ;AAiBA,aAlBJ,IAkBQ,MAnBZ;AAoBH;;;+BAEc,I,EAAM;AACjB,gBAAM,2DAAyD,KAAK,OAA9D,gBAAN;AACA,gBAAM,cAAc,KAAK,eAAL,CAAqB,GAArB,CAAyB,iBAAS;AAClD,+BAAa,MAAM,UAAnB,sCACK,MAAM,IAAN,CAAW,GAAX,CAAe,sBAAc;AAC3B,oCAAc,UAAd;AACH,iBAFC,EAEC,IAFD,CAEM,EAFN,CADL;AAIH,aALmB,CAApB;AAMA,gBAAM,0DACD,KAAK,kBAAL,CAAwB,GAAxB,CAA4B,eAAO;AACjC,gCAAc,GAAd;AACH,aAFC,EAEC,IAFD,CAEM,EAFN,CADC,UAAN;AAIA,qBAAS,cAAT,CAAwB,eAAxB,EAAyC,SAAzC,GAAqD,UAAU,WAAV,GAAuB,aAA5E;AACH;;;qCAEoB,I,EAAM;AACvB,qBAAS,cAAT,CAAwB,gBAAxB,EAA0C,WAA1C,GAAwD,IAAxD;AACH;;;iDAEgC;AAC7B,gBAAM,QAAQ,IAAI,KAAJ,CAAU,kBAAV,CAAd;AACA,kBAAM,IAAN;AACH;;;uCAEsB;AACnB,gBAAI,OAAO,8BAAX;AACA,gBAAM,OAAO,KAAK,iBAAL,EAAb;AACA,gBAAI,IAAJ,EAAU;AACN,6BAAa,SAAb,CAAuB,IAAvB,EACK,IADL,CACU,YAAM;AACR,6BAAS,cAAT,CAAwB,gBAAxB,EAA0C,KAA1C,CAAgD,OAAhD,GAA0D,MAA1D;AACA,6BAAS,aAAT,CAAuB,+BAAvB,EAAwD,KAAxD,CAA8D,OAA9D,GAAwE,MAAxE;AACA,6BAAS,cAAT,CAAwB,aAAxB,EAAuC,KAAvC,CAA6C,OAA7C,GAAuD,OAAvD;AACA,6BAAS,cAAT,CAAwB,aAAxB,EAAuC,KAAvC,GAA+C,KAAK,IAApD;AACH,iBANL,EAMO,eAAO;AACN,wBAAI,mBAAmB,SAAS,aAAT,CAAuB,+BAAvB,CAAvB;AACA,qCAAiB,KAAjB,CAAuB,OAAvB,GAAiC,OAAjC;AACA,4BAAQ,GAAR,CAAY,GAAZ;AACA;AACH,iBAXL;AAYH;AACJ;;;;;;IAKC,Y;AAEF,4BAAe;AAAA;;AACX,aAAK,cAAL,GAAsB,EAAtB;AACA,aAAK,QAAL,GAAgB,EAAhB;AACH;;;;sCAEc;AAAA;;AACZ,yBAAa,WAAb,GACK,IADL,CACU,gBAAQ;AACV,sBAAK,QAAL,GAAgB,IAAhB;AACH,aAHL,EAGO,eAAO;AACN,sBAAM,GAAN;AACH,aALL;AAMF;;;sCAEc;AACX,gBAAM,aAAa,SAAS,cAAT,CAAwB,YAAxB,EAAsC,KAAzD;AACA,gBAAI,KAAK,cAAL,CAAoB,OAApB,CAA6B,UAA7B,CAAJ,SAA8C;AAC1C,wBAAQ,GAAR,CAAY,mBAAZ;AACH,aAFD,MAEO;AACH,wBAAQ,GAAR,CAAY,qBAAZ;AACH;AACJ;;;uCAEe;AACZ,gBAAM,aAAa,KAAK,IAAL,CAAU,KAAK,MAAL,KAAc,IAAxB,CAAnB;AACA,gBAAM,OAAO,KAAK,QAAL,CAAc,UAAd,EAA0B,IAAvC;AACA,iBAAK,SAAL,CAAe,IAAf;AACA,iBAAK,YAAL,CAAkB,IAAlB;AACH;;;kCAEU,I,EAAM;AAAA;;AACb,yBAAa,iBAAb,CAA+B,IAA/B,EACK,IADL,CACU,gBAAQ;AACV,uBAAK,cAAL,GAAsB,YAAY,kBAAZ,CAA+B,YAAY,OAAZ,CAAoB,IAApB,CAA/B,CAAtB;AACH,aAHL,EAGO,eAAO;AACN,sBAAM,GAAN;AACH,aALL;AAMH;;;;;;AAQL,IAAI,kBAAkB,IAAI,YAAJ,EAAtB;AACA,gBAAgB,WAAhB;;AAEA,OAAO,MAAP,GAAgB,YAAM;AAClB,SAAK,YAAL;;AAEA,eAAW,YAAM;AACb,wBAAgB,YAAhB;AACA,mBAAW,aAAX;AACH,KAHD,EAGG,GAHH;AAIH,CAPD","file":"main.compiled.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","/**\r\n * Created by tup1tsa on 08.08.2016.\r\n */\r\nexport default class {\r\n    constructor () {\r\n        \r\n    }\r\n\r\n    checkUserInfo () {\r\n        const authData = this.findLocalAuthData();\r\n        if (authData) {\r\n            const encryptedData = this.encryptData(authData);\r\n            fetch('/auth', {\r\n                method:'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': encryptedData\r\n                }\r\n            })\r\n                .then(response => {\r\n                    console.log(response)\r\n                })\r\n        } else {\r\n            throw new Error('U have not declared password or login')\r\n        }\r\n    }\r\n\r\n    findLocalAuthData () {\r\n        let name = localStorage.getItem('authName');\r\n        let password = localStorage.getItem('authPassword');\r\n        if (!(name && password)) {\r\n            name = document.getElementById('login').value;\r\n            password = document.getElementById('password').value;\r\n        }\r\n        if (name && password) {\r\n            return {\r\n                name,\r\n                password\r\n            }\r\n        }\r\n    }\r\n\r\n    encryptData (userInfo) {\r\n        return btoa(`${userInfo.name}:${userInfo.password}`)\r\n    }\r\n\r\n    \r\n    \r\n}\r\n  ","//todo -  add sound (when u guessed right answer) from fallout4, add authentication (to save user progress)\r\nrequire('whatwg-fetch');\r\nimport AuthClass from './authentication.js';\r\n\r\n \r\n class Controller {\r\n\r\n    static getTranslation() {\r\n        const word = document.getElementById('word').value;\r\n        if ((!word)) return;\r\n        AjaxRequests.getWordFromServer(word)\r\n            .then(data => {\r\n                View.yandex(YandexParse.getData(data))\r\n            }, err => {\r\n                if (err.status === 404) {\r\n                    AjaxRequests.yandexApi(word)\r\n                        .then(data => {\r\n                            View.yandex(YandexParse.getData(data))\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    static getMeaning() {\r\n        const word = document.getElementById('word').value;\r\n        if ((!word)) return;\r\n        AjaxRequests.googleApi(word)\r\n            .then(data => {\r\n                View.google(GoogleParse.getData(data))\r\n            })\r\n    }\r\n\r\n    static listenButtons () {\r\n        document.getElementById(\"getMeaning\").onclick = Controller.getMeaning;\r\n        document.getElementById(\"getTranslation\").onclick  = Controller.getTranslation;\r\n        document.getElementById(\"checkAnswer\").onclick = learningMachine.checkAnswer.bind(learningMachine);\r\n        document.getElementById(\"sendQuestion\").onclick = learningMachine.sendQuestion.bind(learningMachine);\r\n        document.getElementById('loginBtn').onclick = () => {\r\n            let auth = new AuthClass();\r\n            auth.checkUserInfo()\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n class AjaxRequests {\r\n     \r\n     static checkStatus (response) {\r\n         if (response.status >= 200 && response.status < 300) {\r\n             return response\r\n         } else {\r\n             const error = new Error(response.statusText);\r\n             error.response = response;\r\n             throw error\r\n         }\r\n     }\r\n\r\n     static yandexApi(word) {\r\n        return new Promise(resolve => {\r\n           fetch('/learnWords/getTranslation', {\r\n               method: 'post',\r\n               headers: {\r\n                   'Content-Type': 'application/json'\r\n               },\r\n               body: JSON.stringify({\r\n                   word\r\n               })\r\n           })\r\n               .then(AjaxRequests.checkStatus)\r\n               .then(response => {\r\n                   resolve (response.text())\r\n               })\r\n\r\n        });\r\n     }\r\n\r\n     static googleApi (word) {\r\n         return new Promise (resolve => {\r\n            fetch('/learnWords/getMeaning', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    word\r\n                })\r\n            })\r\n                .then(AjaxRequests.checkStatus)\r\n                .then(response => {\r\n                    resolve(response.text())\r\n                })\r\n         });\r\n     }\r\n\r\n     static getWordFromServer (word) {\r\n         return new Promise ((resolve,reject) => {\r\n             fetch(`http://tup1tsa.bounceme.net/learnWords/wordsLists/yandexTranslations/${word}.txt`)\r\n                 .then(AjaxRequests.checkStatus)\r\n                 .then(response => {\r\n                     resolve(response.json())\r\n                 }, err => {\r\n                     reject(err)\r\n                 })\r\n         })\r\n     }\r\n\r\n     static getWordList () {\r\n         return new Promise ((resolve, reject) => {\r\n             fetch(`http://tup1tsa.bounceme.net/learnWords/wordsLists/sortedWordsList.json`)\r\n                 .then(AjaxRequests.checkStatus)\r\n                 .then(response => {\r\n                     resolve(response.json())\r\n                 }, err => {\r\n                     reject(err)\r\n                 })\r\n         })\r\n     }\r\n     \r\n     static checkAuth (data) {\r\n         return new Promise ((resolve, reject) => {\r\n             fetch('/auth', {\r\n                 method: 'post',\r\n                 headers: {\r\n                     'Content-Type': 'application/json'\r\n                 },\r\n                 body: JSON.stringify(data)\r\n             })\r\n                 .then(AjaxRequests.checkStatus)\r\n                 .then(response => {\r\n                     resolve(response.text())\r\n                 }, err => {\r\n                     reject(err)\r\n                 })\r\n         })\r\n     }\r\n\r\n }\r\n\r\n class YandexParse {\r\n\r\n    static getData (jsonData) {\r\n        if (jsonData.def.length === 0) return;\r\n        return jsonData.def.map(description => {\r\n            return {\r\n                type: description.pos || ``,\r\n                transcription: description.ts ? `[${description.ts}]` : ``,\r\n                translations: description.tr\r\n                    .map(translation => {\r\n                        return {\r\n                            examples: YandexParse.transformExamples(translation.ex),\r\n                            synonyms: YandexParse.transformSynonyms(translation.syn),\r\n                            synonymsEn: YandexParse.transformSynonyms(translation.mean),\r\n                            translationType: translation.pos,\r\n                            translation: translation.text\r\n                        };\r\n                    })\r\n\r\n            };\r\n        })\r\n    }\r\n\r\n    static transformExamples (examples = []) {\r\n        return examples.map(example => {\r\n            return `${example.text} - ${example.tr[0].text}`\r\n        })\r\n    }\r\n\r\n    static transformSynonyms (synonyms = []) {\r\n        return synonyms.map(synonym => {\r\n            return synonym.text\r\n        })\r\n    }\r\n\r\n    static findCorrectAnswers (parsedWords) {\r\n        return parsedWords.map(word => {\r\n            return word.translations.map(translation => {\r\n                return translation.translation.toLowerCase()\r\n            })\r\n        }).reduce((previousWords, currentWord) => {\r\n            return previousWords.concat(currentWord)\r\n        }, [])\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n class GoogleParse {\r\n\r\n     static getData (rawData) {\r\n         return {\r\n             definitionLists : GoogleParse.findDefinitionLists(GoogleParse.findDefinitionChunks(rawData)),\r\n             webDefinitionLists: GoogleParse.findWebDefinitionLists(GoogleParse.findWebDefinitionChunk(rawData)),\r\n             grammar: GoogleParse.findGrammar(rawData)\r\n         }\r\n     }\r\n\r\n     static findDefinitionChunks(rawData) {\r\n         const regExp = /<b>(.*)\\n[\\s\\S]*?<\\/[\\s\\S]*?<div class=std style=\"padding-left:40px\">([\\s\\S]*?)(<div id=\"forEmbed\">|<hr>)/g;\r\n         let regExpResult;\r\n         let definitionsChunks = [];\r\n         while ((regExpResult = regExp.exec(rawData)) !== null) {\r\n             definitionsChunks.push({\r\n                 typeOfWord: regExpResult[1],\r\n                 body: regExpResult[2]\r\n             })\r\n         }\r\n         return definitionsChunks\r\n     }\r\n\r\n     static findDefinitionLists(chunks) {\r\n         return chunks.map(chunk => {\r\n             const list = chunk.body.split(/<li style=\"list-style:decimal\">/g).slice(1).map(listValue => {\r\n                return GoogleParse.deleteUnnecessaryRow(listValue)\r\n             });\r\n             return {\r\n                 typeOfWord: chunk.typeOfWord,\r\n                 list\r\n             }\r\n         })\r\n     }\r\n\r\n     static deleteUnnecessaryRow(listValue) {\r\n         const regExp = /color:#767676/;\r\n         if (listValue.match(regExp)) {\r\n             return listValue\r\n         } else {\r\n             return listValue.replace(/<div[\\s\\S]*<\\/div>/, '')\r\n         }\r\n     }\r\n\r\n\r\n     static findWebDefinitionChunk(rawData) {\r\n         const regExp = /Web Definitions[\\s\\S]*<\\/ol>/g;\r\n         return rawData.match(regExp)[0];\r\n     }\r\n\r\n     static findWebDefinitionLists (chunk) {\r\n         let webList = [];\r\n         const regExp = /<li style=\"list-style:decimal; margin-bottom:10px;\">([\\s\\S]*?)<\\/li>/g;\r\n         let regExpResult;\r\n         while ((regExpResult = regExp.exec(chunk)) !== null) {\r\n             webList.push(regExpResult[1])\r\n         }\r\n         return webList\r\n     }\r\n\r\n     static findGrammar (rawData) {\r\n         const regExp = /<span style=\"color:#767676\">([\\s\\S]*?)<\\/span>/;\r\n         return rawData.match(regExp)[1].slice(0,-2);\r\n     }\r\n }\r\n\r\n\r\n class View {\r\n\r\n     static yandex (words) {\r\n         document.getElementById('translationBox').innerHTML =\r\n             words.map(word => {\r\n                 return `<br><span class=\"ital\"><b>${word.type}</b></span> ${word.transcription} ` +\r\n                     word.translations.map((translation, index) => {\r\n                         let innerHTML =`<br>${index+1}) ${translation.translation}`;\r\n                         if (translation.examples.length !== 0) {\r\n                             innerHTML += '. <br><span class=\"tabbed\">Examples:</span> ' +\r\n                                 translation.examples.join('; ');\r\n                         }\r\n                         if (translation.synonyms.length !== 0) {\r\n                             innerHTML += `. <br><span class=\"tabbed\">Synonyms:</span> `+\r\n                                 translation.synonyms.join('; ');\r\n                         }\r\n                         if (translation.synonymsEn.length !== 0) {\r\n                             innerHTML += `. <br><span class=\"tabbed\">Synonyms (en):</span> `+\r\n                                 translation.synonymsEn.join('; ');\r\n                         }\r\n                         return innerHTML\r\n                     }).join('')\r\n                }) + '<hr>';\r\n     }\r\n\r\n     static google (data) {\r\n         const grammar = `<span class=\"googleGrammar\"><b>Grammar:</b> ${data.grammar}</span><br>`;\r\n         const definitions = data.definitionLists.map(chunk => {\r\n             return `<b>${chunk.typeOfWord}</b><br><ol>\r\n                ${chunk.list.map(definition => {\r\n                    return `<li>${definition}</li>`\r\n                }).join('')}</ol><hr>`\r\n         });\r\n         const webDefinition = `<b>Web Results:</b><ol>\r\n            ${data.webDefinitionLists.map(row => {\r\n                return `<li>${row}</li>`\r\n            }).join('')}</ol>`;\r\n         document.getElementById('dictionaryBox').innerHTML = grammar + definitions+ webDefinition\r\n     }\r\n\r\n     static showQuestion (word) {\r\n         document.getElementById('questionedWord').textContent = word\r\n     }\r\n\r\n     static playCorrectAnswerSound () {\r\n         const audio = new Audio('audio/whoosh.mp3');\r\n         audio.play();\r\n     }\r\n\r\n     static showUserInfo () {\r\n         let auth = new AuthClass();\r\n         const data = auth.findLocalAuthData();\r\n         if (data) {\r\n             AjaxRequests.checkAuth(data)\r\n                 .then(() => {\r\n                     document.getElementById('authentication').style.display = 'none';\r\n                     document.querySelector('#authentication .notification').style.display = 'none';\r\n                     document.getElementById('profileData').style.display = 'block';\r\n                     document.getElementById('profileName').value = auth.name\r\n                 }, err => {\r\n                     let notificationElem = document.querySelector('#authentication .notification');\r\n                     notificationElem.style.display = 'block';\r\n                     console.log(err);\r\n                     //notificationElem.textContent = err\r\n                 })\r\n         }\r\n     }\r\n\r\n}\r\n\r\n\r\n class LearnMachine {\r\n\r\n     constructor () {\r\n         this.correctAnswers = [];\r\n         this.allWords = []\r\n     }\r\n\r\n     getAllWords () {\r\n        AjaxRequests.getWordList()\r\n            .then(data => {\r\n                this.allWords = data\r\n            }, err => {\r\n                throw err\r\n            })\r\n     }\r\n\r\n     checkAnswer () {\r\n         const userAnswer = document.getElementById('answerWord').value;\r\n         if (this.correctAnswers.includes(userAnswer)) {\r\n             console.log('answer is correct')\r\n         } else {\r\n             console.log('answer is incorrect')\r\n         }\r\n     }\r\n\r\n     sendQuestion () {\r\n         const wordNumber = Math.ceil(Math.random()*1000);\r\n         const word = this.allWords[wordNumber].word;\r\n         this.getAnswer(word);\r\n         View.showQuestion(word)\r\n     }\r\n\r\n     getAnswer (word) {\r\n         AjaxRequests.getWordFromServer(word)\r\n             .then(data => {\r\n                 this.correctAnswers = YandexParse.findCorrectAnswers(YandexParse.getData(data));\r\n             }, err => {\r\n                 throw err\r\n             })\r\n     }\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n var learningMachine = new LearnMachine();\r\n learningMachine.getAllWords();\r\n \r\n window.onload = () => {\r\n     View.showUserInfo();\r\n\r\n     setTimeout(() => {\r\n         learningMachine.sendQuestion();\r\n         Controller.listenButtons();\r\n     }, 200)\r\n };\r\n\r\n\r\n\r\n"]}